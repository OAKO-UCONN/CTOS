++++++++++++++++++++++++++++++++++++++++++++++++
Generic Secure Timer aarch64
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\core\arch\arm\kernel\generic_boot.c
-> __weak void generic_s_timer_start(void){}
-> generic_s_timer_start();

\optee_os\core\arch\arm\plat-vexpress\main.c
-> void generic_s_timer_start(void){}
-> #ifdef IT_SECURE_TIMER {...} #endif

\optee_os\core\arch\arm\include\kernel\generic_boot.h
-> void generic_s_timer_start(void);

\optee_os\core\arch\arm\include\arm64.h
-> DEFINE_U64_REG_READ_FUNC(cntpct_el0)
-> DEFINE_U64_REG_READ_FUNC(cntfrq_el0)
-> DEFINE_U64_REG_READ_FUNC(cntps_ctl_el1)
-> DEFINE_U64_REG_WRITE_FUNC(cntps_cval_el1)
-> DEFINE_U64_REG_WRITE_FUNC(cntps_ctl_el1)

\optee_os\core\arch\arm\plat-vexpress\platform_config.h
-> #define IT_SECURE_TIMER 29

++++++++++++++++++++++++++++++++++++++++++++++++
Generic Secure Timer aarch32
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\core\arch\arm\include\arm32.h
-> static inline void write_cntp_cval(uint64_t cval)
-> static inline void write_cntfrq(uint32_t frq)
-> static inline uint32_t read_cntp_ctl(void)

++++++++++++++++++++++++++++++++++++++++++++++++
Static TA
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\core\arch\arm\pta\
+ sta_filter.c
~\sub.mk
-> #srcs-$(CFG_TEE_CORE_EMBED_INTERNAL_TESTS) += sta_filter.c

\linux-optee\drivers\tee
+ tee_core_cp.c
+ tee_core_extern.h
+ tee_client_api.c

~\Makefile
-> tee-objs += tee_core_cp.o
-> tee-objs += tee_client_api.o

\linux-optee\drivers\tee\optee
+ tee_filter.c

~\Makefile
-> optee-objs += tee_filter.o

\linux-optee\drivers\tee\optee\core.c
-> //void tee_filter(struct tee_device *teedev);
-> //tee_filter(optee->teedev);

\linux-optee\include\linux\
+ tee_client_api.h

++++++++++++++++++++++++++++++++++++++++++++++++
Dynamic TA
++++++++++++++++++++++++++++++++++++++++++++++++
\hello_world\ta\hello_world_ta.c
-> static void test_cpu(void){}
-> test_cpu();

++++++++++++++++++++++++++++++++++++++++++++++++
Static TA : test_idle
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\core\arch\arm\pta\
+ test_idle.c

~\sub.mk
-> srcs-$(CFG_TEE_CORE_EMBED_INTERNAL_TESTS) += test_idle.c

\hello_world\ta\include\hello_world_ta.h
-> #define STA_TEST_IDLE_UUID

\hello_world\host\main.c
-> TEEC_UUID uuid = STA_TEST_IDLE_UUID;
-> res = TEEC_InvokeCommand(&sess, 163, &op, &err_origin);

++++++++++++++++++++++++++++++++++++++++++++++++
optee_os aarch32
++++++++++++++++++++++++++++++++++++++++++++++++
\build\Makefile
-> COMPILE_S_USER  ?= 32
-> COMPILE_S_KERNEL ?= 32

++++++++++++++++++++++++++++++++++++++++++++++++
expand optee with minix
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\core\include\drivers\
+ rtos_bsp_intr.h

\optee_os\core\drivers\
+ rtos_bsp_intr.c

\optee_os\core\drivers\gic.c
-> void gic_it_enable (remove static)
-> void gic_it_disable (remove static)
-> void gic_it_add (remove static)
-> irq_handle(id);

\optee_os\core\include\drivers\gic.h
-> void gic_it_enable(struct gic_data *gd, size_t it);
-> void gic_it_disable(struct gic_data *gd, size_t it);
-> void gic_it_add(struct gic_data *gd, size_t it);

\optee_os\core\arch\arm\kernel\generic_boot.c
-> intr_init();
-> static void intr_init(void){}

\optee_os\core\include\kernel\
+ rtos_type.h
+ rtos_interrupt.h
+ rtos_glo.h

\optee_os\core\kernel\
+ rtos_interrupt.c

\optee_os\core\drivers\sub.mk
-> srcs-$(CFG_GIC) += rtos_bsp_intr.c

\optee_os\core\kernel\sub.mk
-> srcs-y += rtos_interrupt.c

\optee_os\core\arch\arm\plat-vexpress\main.c
-> struct gic_data gic_data; (remove static)
-> #ifdef IT_SECURE_TIMER {} #endif
-> #ifdef OLD_IT_SECURE_TIMER {} #endif
-> #ifdef IT_CONSOLE_UART {} #endif
-> #ifdef OLD_IT_CONSOLE_UART {} #endif

++++++++++++++++++++++++++++++++++++++++++++++++
optee monotonic time
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\core\include\
+ rtos_jiffies.h
+ rtos_time.h
+ rtos_timer.h
+ rtos_list.h
+ rtos_percpu.h
+ rtos_poison.h
+ rtos_hardfiq.h
+ rtos_fiq_cpustat.h

\optee_os\core\kernel\
+ rtos_time.c
+ rtos_timer.c
+ rtos_softfiq.c
+ rtos_hardfiq.c

\optee_os\core\kernel\sub.mk
-> srcs-y += rtos_time.c
-> srcs-y += rtos_timer.c
-> srcs-y += rtos_softfiq.c
-> srcs-y += rtos_hardfiq.c

\optee_os\core\arch\arm\plat-vexpress\main.c
-> #ifdef IT_SECURE_TIMER {...} #endif
-> static void restart_s_timer(void);
-> #include <rtos_timer.h>
-> static void mytimer(void);
-> static void myfunction(unsigned long data);
-> mytimer();
-> uint32_t n;
-> struct timer_list timer1;
-> struct timer_list timer2;
-> struct timer_list timer3;
-> struct timer_list timer4;
-> struct timer_list timer5;
-> struct timer_list timer6;

\optee_os\core\include\kernel\interrupt.h
-> enum { TIMER_SOFTFIQ = 0, NR_SOFTIRQS };
-> extern void raise_softfiq(unsigned long nr);
-> extern void raise_softfiq_fiqoff(unsigned int nr);
-> extern void wakeup_softfiqd(void);
-> extern void open_softfiq(int nr, void (*action)(void));
-> #define __raise_softfiq_fiqoff(nr) do { or_softfiq_pending(1UL << (nr)); } while (0)
-> #define or_softfiq_pending(x)  (local_softfiq_pending() |= (x))
-> struct softfiq_action {...};
-> extern void do_softfiq(void);
-> extern void __do_softfiq(void);
-> #define set_softfiq_pending(x) (local_softfiq_pending() = (x))

\optee_os\core\arch\arm\kernel\generic_boot.c
-> #include <rtos_timer.h>
-> init_timers();

\optee_os\core\arch\arm\plat-vexpress\main.c
-> #include <rtos_hardfiq.h>
-> fiq_enter();
-> fiq_exit();

++++++++++++++++++++++++++++++++++++++++++++++++
optee process
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1######
\hello_world\ta\hello_world_ta.c
-> TA_OpenSessionEntryPoint(){...}

\optee_os\
+ process.ta ( \hello_world\ta\*.ta )

\optee_os\out\arm\core\
- tee.bin

\optee_os\scripts\gen_hashed_bin.py
-> ta_size = os.path.getsize("./process.ta");
-> init_size = pager_input_size + min(init_bin_size, paged_input_size) + hash_size + ta_size
-> append_to(outf, 0, './process.ta') (args.out)
-> append_to(outf, 0, './process.ta') (args.out_pager_v2)

\arm-trusted-firmware\services\spd\opteed\opteed_main.c
-> memcpy((void*)0x6100000ul, (void*)(0x6000000ul+init_size-0x226c4), 0x226c4u); (opteed_setup(void))

\optee_os\core\kernel\tee_ta_manager.c
-> static TEE_Result sn_tee_ta_init_session(...){...}
-> TEE_Result sn_tee_ta_open_session(...){...}

\optee_os\core\include\kernel\tee_ta_manager.h
-> TEE_Result sn_tee_ta_open_session(...);

\optee_os\core\arch\arm\tee\entry_std.c
-> static void sn_entry_open_session(struct thread_smc_args *smc_args){...}
-> void sn_tee_entry_std(struct thread_smc_args *smc_args){...}

\optee_os\core\arch\arm\include\tee\entry_std.h
-> void sn_tee_entry_std(struct thread_smc_args *args);

\optee_os\core\arch\arm\kernel\thread.c
-> #include <tee\entry_std.h>
-> void sn_thread_std_smc_entry(void);
-> static void sn_thread_alloc_and_run(void){...}
-> void __sn_thread_std_smc_entry(struct thread_smc_args *args __attribute__((unused))){...}
-> sn_thread_alloc_and_run();

\optee_os\core\arch\arm\kernel\thread_private.h
-> void __sn_thread_std_smc_entry(struct thread_smc_args *args);

\optee_os\core\arch\arm\kernel\thread_a64.S
-> FUNC sn_thread_std_smc_entry {... bl	__sn_thread_std_smc_entry ...} END_FUNC sn_thread_std_smc_entry

\optee_os\core\arch\arm\include\kernel\user_ta.h
-> TEE_Result sn_tee_ta_init_user_ta_session(const TEE_UUID *uuid, struct tee_ta_session *s);
-> TEE_Result sn_tee_ta_register_ta_store(const struct user_ta_store_ops *ops);

\optee_os\core\arch\arm\kernel\user_ta.c
-> static const struct user_ta_store_ops *sn_user_ta_store;
-> TEE_Result sn_tee_ta_register_ta_store(const struct user_ta_store_ops *ops){...}
-> TEE_Result sn_tee_ta_init_user_ta_session(const TEE_UUID *uuid, struct tee_ta_session *s){...}
-> static TEE_Result sn_ta_load(...){...}

\optee_os\core\arch\arm\kernel\ree_fs_ta.c
-> static TEE_Result sn_register_supplicant_user_ta(void){...}
-> service_init(sn_register_supplicant_user_ta);
-> static const struct user_ta_store_ops sn_ops = {.open = sn_ta_open, .close = sn_ta_close};
-> static void sn_ta_close(struct user_ta_store_handle *h){...}
-> static TEE_Result sn_ta_open(const TEE_UUID *uuid, struct user_ta_store_handle **h){...}

\optee_os\core\arch\arm\plat-vexpress\platform_config.h
-> #define CFG_TEE_RAM_VA_SIZE (2 * 1024 * 1024)

######phase 2######
\optee_os\scripts\gen_hashed_bin.py
-> process1_size	   = os.path.getsize("./process1.ta");
-> process2_size	   = os.path.getsize("./process2.ta");
-> init_size = pager_input_size + min(init_bin_size, paged_input_size) + hash_size + process1_size + process2_size
-> append_to(outf, 0, './process1.ta') (args.out)
-> append_to(outf, 0, './process2.ta')
-> append_to(outf, 0, './process1.ta') (args.out_pager_v2)
-> append_to(outf, 0, './process2.ta')

\arm-trusted-firmware\services\spd\opteed\opteed_main.c
-> memcpy((void*)0x6100000ul, (void*)(0x6000000ul + init_size - 0x44d88), 0x44d88u);

\optee_os\lib\libutee\arch\arm\user_ta_entry.c
-> unsigned num = 0;
-> while(1) {...res = entry_open_session(session_id, up); utee_sn_test();...}

\optee_os\lib\libutee\include\utee_syscalls.h
-> void utee_sn_test(void) __noreturn;

\optee_os\lib\libutee\arch\arm\utee_syscalls_asm.S
-> UTEE_SYSCALL utee_sn_test, TEE_SCN_SN_TEST, 0

\optee_os\lib\libutee\include\tee_syscall_numbers.h
-> #define TEE_SCN_SN_TEST 71
-> #define TEE_SCN_MAX 71

\optee_os\core\arch\arm\tee\arch_svc.c
-> SYSCALL_ENTRY(syscall_sn_test),

\optee_os\core\include\tee\tee_svc.h
-> void syscall_sn_test(void);

\optee_os\core\tee\tee_svc.c
-> void sn_thread_sched(void);
-> void syscall_sn_test(void){...}

\optee_os\core\arch\arm\kernel\thread_private.h
-> void sn_thread_sched(void);
-> void sn_thread_state_suspend(vaddr_t pc, uint32_t cpsr);

\optee_os\core\arch\arm\kernel\thread_a64.S
-> FUNC sn_thread_sched ... END_FUNC sn_thread_sched

\optee_os\core\arch\arm\kernel\thread.c
-> int sn_ta_num = 0;
-> void sn_thread_state_suspend(vaddr_t pc, uint32_t cpsr){...}

\optee_os\core\arch\arm\kernel\ree_fs_ta.c
-> if(sn_ta_num > 0){ta = (void*)0x61226c4ul;}
-> extern int sn_ta_num;

\hello_world\ta\hello_world_ta.c
-> DMSG("Hello World         A\n");

\optee_os\
+ process1.ta ( \hello_world\ta\*.ta )
+ process2.ta ( \hello_world\ta\*.ta )

\optee_os\out\arm\core\
- tee.bin

++++++++++++++++++++++++++++++++++++++++++++++++
optee sleep
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\lib\libutee\arch\arm\user_ta_entry.c
-> utee_sleep();

\optee_os\lib\libutee\include\utee_syscalls.h
-> void utee_sleep(void) __noreturn;

\optee_os\lib\libutee\arch\arm\utee_syscalls_asm.S
-> UTEE_SYSCALL utee_sleep, TEE_SCN_SLEEP, 0

\optee_os\core\arch\arm\tee\arch_svc.c
-> SYSCALL_ENTRY(syscall_sleep),

\optee_os\core\include\tee\tee_svc.h
-> void syscall_sleep(void);

\optee_os\core\tee\tee_svc.c
-> #include <rtos_timer.h>
-> #include <rtos_wait.h>
-> void syscall_sleep(void){...}

\optee_os\core\kernel\
+ rtos_sched.c

\optee_os\core\kernel\sub.mk
-> srcs-y += rtos_sched.c

\optee_os\core\include\
+ rtos_wait.h

\optee_os\lib\libutee\include\tee_syscall_numbers.h
-> #define TEE_SCN_SLEEP 72
-> #define TEE_SCN_MAX 72

++++++++++++++++++++++++++++++++++++++++++++++++
optee schedule 
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1######
\optee_os\core\arch\arm\plat-vexpress\main.c
-> void sn_sched(void);
-> sn_sched();

\optee_os\core\arch\arm\kernel\thread.c
-> void sn_sched(void);
-> void sn_sched(void){...}
-> struct thread_ctx th_head = { ... };

\optee_os\core\arch\arm\kernel\thread_a64.S
-> native_new_func ... native_old_func (.macro native_intr_handler mode:req)
-> foreign_new_func ... old_func (.macro foreign_intr_handler mode:req)

\optee_os\core\arch\arm\kernel\thread_private.h
-> struct thread_ctx* prev; (struct thread_ctx)
-> struct thread_ctx* next;

\optee_os\core\arch\arm\kernel\asm-defines.c
-> DEFINE(THREAD_CTX_REGS_CPSR, offsetof(struct thread_ctx_regs, cpsr));

\optee_os\lib\libutee\arch\arm\user_ta_entry.c
-> ...

\hello_world\ta\hello_world_ta.c
-> ...

######phase 2######
\optee_os\core\arch\arm\kernel\thread_a64.S
-> .macro intr_restore_process_context {...} .endm
-> .macro intr_save_process_context {...} .endm
-> .macro new_native_intr_handler mode:req {...} .endm
-> .macro native_intr_handler mode:req {...} .endm
-> process_native_intr_handler	fiq
-> process_native_intr_handler	irq

\optee_os\core\arch\arm\kernel\thread.c
-> #include <rtos_sched.h>
-> static void alloc_ready_process(void);
-> static void alloc_ready_process(void) {...}
-> void process_sched(void) {...}

\optee_os\core\kernel\rtos_timer.c
-> #include <rtos_sched.h>
-> scheduler_tick();

\optee_os\core\kernel\rtos_sched.c
-> #include <rtos_sched.h>
-> void scheduler_tick(void) {...}

\optee_os\core\include\
+ rtos_sched.h

++++++++++++++++++++++++++++++++++++++++++++++++
optee mutex 2018-1-31
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-1
\optee_os\core\arch\arm\include\kernel\mutex.h
-> void tee_mutex_unlock(struct mutex *m);
-> void tee_mutex_lock(struct mutex *m);
-> bool tee_mutex_trylock(struct mutex *m);

\optee_os\core\arch\arm\kernel\mutex.c
-> void tee_mutex_unlock(struct mutex *m) {...}
-> void tee_mutex_lock(struct mutex *m) {...}
-> static void __tee_mutex_unlock(struct mutex *m) {...}
-> static void __tee_mutex_lock(struct mutex *m) {...}
-> bool tee_mutex_trylock(struct mutex *m) {...}
-> static bool __tee_mutex_trylock(struct mutex *m) {...}

\optee_os\core\arch\arm\include\kernel\wait_queue.h
-> #include <kernel/mutex.h>
-> struct mutex;
-> void tee_wq_wait_final(struct wait_queue *wq, struct wait_queue_elem *wqe, struct mutex *m);
-> void tee_wq_wake_one(struct wait_queue *wq);

\optee_os\core\arch\arm\kernel\wait_queue.c
-> #include <rtos_sched.h>
-> void tee_wq_wait_final(struct wait_queue *wq, struct wait_queue_elem *wqe, struct mutex *m) {...}
-> void tee_wq_wake_one(struct wait_queue *wq) {...}

\optee_os\core\include\rtos_sched.h
-> extern void mutex_process_sleep(void);

\optee_os\core\arch\arm\include\kernel\thread.h
-> void tee_thread_rem_mutex(struct mutex *m);

\optee_os\core\arch\arm\kernel\thread.c
-> void mutex_process_sleep(void) {...}
-> void sn_thread_state_suspend(vaddr_t pc, uint32_t cpsr) {...}
-> void tee_thread_rem_mutex(struct mutex *m) {...}

\optee_os\core\kernel\rtos_timer.c
-> void update_process_times(void) {...}

\hello_world\ta\hello_world_ta.c
-> ...

\optee_os\lib\libutee\arch\arm\user_ta_entry.c
-> utee_sn_test();
-> ...

\optee_os\core\include\tee\tee_svc.h
-> void syscall_sn_test(void) __noreturn;

\optee_os\core\tee\tee_svc.c
-> #include <kernel/mutex.h>
-> static struct mutex tee_m = MUTEX_INITIALIZER;
-> void syscall_sn_test(void) {...}

++++++++++++++++++++++++++++++++++++++++++++++++
optee proc structure 2018-2-2
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-6
\optee_os\core\arch\arm\include\kernel\
+ proc.h

\optee_os\core\arch\arm\kernel\
+ proc.c

\optee_os\core\arch\arm\kernel\sub.mk
-> srcs-y += proc.c

\optee_os\core\arch\arm\kernel\generic_entry_a64.S
-> bl get_cpu_local (.macro set_sp {...} .endm)

++++++++++++++++++++++++++++++++++++++++++++++++
optee message 2018-2-2
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-6
\optee_os\core\arch\arm\include\kernel\
+ ipc.h

######phase 2###### 2018-2-12
\optee_os\core\arch\arm\include\kernel\ipc.h
-> #define P_SENDING (1 << 0) 
-> #define P_RECVING (1 << 1)

\optee_os\core\arch\arm\kernel\proc.c
-> #include <string.h>
-> void proc_schedule(void) {...}

\optee_os\lib\libutee\include\tee_syscall_numbers.h
-> #define TEE_SCN_SEND 73
-> #define TEE_SCN_RECEIVE 74
-> #define TEE_SCN_SENDREC 75
-> #define TEE_SCN_MAX 75

\optee_os\lib\libutee\arch\arm\utee_syscalls_asm.S
-> UTEE_SYSCALL utee_send, TEE_SCN_SEND, 2
-> UTEE_SYSCALL utee_receive, TEE_SCN_RECEIVE, 2
-> UTEE_SYSCALL utee_sendrec, TEE_SCN_SENDREC, 2

\optee_os\lib\libutee\include\utee_syscalls.h
-> int utee_send(int who, void *msg);
-> int utee_receive(int who, void *msg);
-> int utee_sendrec(int who, void *msg);

\optee_os\core\arch\arm\tee\arch_svc.c
-> SYSCALL_ENTRY(syscall_send), (tee_svc_syscall_table {...})
-> SYSCALL_ENTRY(syscall_receive),
-> SYSCALL_ENTRY(syscall_sendrec),

\optee_os\core\include\tee\tee_svc.h
-> int syscall_send(struct proc *proc);
-> int syscall_receive(struct proc *proc);
-> int syscall_sendrec(struct proc *proc);
-> int sn_notify(int who);

\optee_os\core\arch\arm\include\kernel\proc.h
-> #define PROC_ANY (-1)

\optee_os\core\tee\tee_svc.c
-> int syscall_send(struct proc *proc) {...}
-> int syscall_receive(struct proc *proc) {...}
-> int syscall_sendrec(struct proc *proc) {...}
-> int sn_notify(int who) {...}
-> extern struct proc procs[];

++++++++++++++++++++++++++++++++++++++++++++++++
optee process elf run 2018-2-2
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-6
\optee_os\core\arch\arm\kernel\thread_private.h
-> int call_resume(struct pcb_regs *regs, uint32_t spsr);

\optee_os\core\arch\arm\kernel\thread_a64.S
-> FUNC call_resume {...} END_FUNC call_resume

\optee_os\core\arch\arm\kernel\asm-defines.c
-> DEFINE(PCB_REGS_SP, offsetof(struct proc, regs.sp));
-> DEFINE(PCB_REGS_X0, offsetof(struct proc, regs.x[0]));
-> DEFINE(PCB_REGS_X1, offsetof(struct proc, regs.x[1]));

######phase 2###### 2018-2-10
\optee_os\core\arch\arm\include\kernel\proc.h
-> #define P_DELIVE (1 << 0)
-> #define P_INTER (1 << 1)
-> void proc_schedule(void);

\optee_os\core\arch\arm\kernel\thread_private.h
-> void proc_resume(struct pcb_regs *regs);

\optee_os\core\arch\arm\kernel\thread_a64.S
-> FUNC proc_resume {...} END_FUNC proc_resume

\optee_os\core\arch\arm\kernel\asm-defines.c
-> DEFINE(UREGS_SP, offsetof(struct pcb_regs, sp));
-> DEFINE(UREGS_X0, offsetof(struct pcb_regs, x[0]));
-> DEFINE(UREGS_X1, offsetof(struct pcb_regs, x[1]));
-> DEFINE(PROC_KSTACK, offsetof(struct proc, k_stack));

\optee_os\core\arch\arm\kernel\proc.c
-> proc_schedule(); (void proc_clr_boot(void) {...})
-> void proc_schedule(void) {...}

\optee_os\core\arch\arm\kernel\thread.c
-> struct cpu_local *get_cpu_local(void) {...}

\optee_os\core\arch\arm\kernel\thread_private.h
-> struct cpu_local* get_cpu_local(void);

######phase 3###### 2018-2-11
\optee_os\lib\libutee\arch\arm\user_ta_entry.c
-> void __noreturn __tee_utee_entry(void) {...}
-> static TEE_Result user_main(void) {...}

\optee_os\core\arch\arm\tee\arch_svc.c
-> //SYSCALL_ENTRY(syscall_sys_return),
-> SYSCALL_ENTRY(sn_syscall_sys_return),

\optee_os\core\include\tee\tee_svc.h
-> void sn_syscall_sys_return(struct proc *proc);

\optee_os\core\arch\arm\tee\arch_svc_a64.S
-> FUNC sn_syscall_sys_return {...} END_FUNC sn_syscall_sys_return


++++++++++++++++++++++++++++++++++++++++++++++++
optee process elf load 2018-2-2
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-6
\optee_os\core\arch\arm\kernel\generic_entry_a64.S
-> bl proc_clr_boot (FUNC _start {...} END_FUNC _start)

\optee_os\core\arch\arm\kernel\proc.c
-> #include "thread_private.h"
-> static void init_proc(void) {...}
-> void proc_clr_boot(void) {...}
-> int proc_alloc(void *ta) {...}

\optee_os\core\arch\arm\include\kernel\proc.h
-> void proc_clr_boot(void);
-> int proc_alloc(void *ta);

\optee_os\core\arch\arm\kernel\thread.c
-> #include <kernel/proc.h>
-> static struct cpu_local cpu_locals[CFG_TEE_CORE_NB_CORE];
-> void init_cpu_locals(void) {...}
-> void thread_clr_boot_thread(void) {...}

\optee_os\core\arch\arm\include\kernel\thread.h
-> void init_cpu_locals(void);

\optee_os\core\arch\arm\kernel\thread_private.h
-> void proc_load_entry(void);

\optee_os\core\arch\arm\kernel\thread_a64.S
-> FUNC proc_load_entry {...} END_FUNC proc_load_entry

\optee_os\core\include\kernel\tee_ta_manager.h
-> TEE_Result tee_ta_exec(void* ta_addr, size_t pn);

\optee_os\core\kernel\tee_ta_manager.c
-> TEE_Result tee_ta_exec(void* ta_addr, size_t pn) {...}
-> extern struct proc procs[];
-> extern struct list_head run_queues[];

\optee_os\core\arch\arm\include\kernel\user_ta.h
-> #include <signed_hdr.h>
-> #include <kernel/proc.h>
-> TEE_Result tee_ta_load(struct shdr *signed_ta, struct proc *proc);

\optee_os\core\arch\arm\kernel\user_ta.c
-> TEE_Result tee_ta_load(struct shdr *signed_ta, struct proc *proc) {...}
-> static TEE_Result sn_load_elf(struct proc *proc, struct shdr *shdr) {...}
-> static TEE_Result sn_load_elf_segments(struct proc *proc, struct elf_load_state *elf_state, bool init_attrs) {...}
-> static TEE_Result sn_config_initial_paging(struct proc *proc __unused) {...}
-> static TEE_Result sn_config_final_paging(struct proc *proc) {...}

\optee_os\core\arch\arm\kernel\elf_load.h
-> #include <signed_hdr.h>
-> TEE_Result sn_elf_load_init(struct elf_load_state **ret_state, struct shdr *shdr); 
-> TEE_Result sn_elf_load_head(struct elf_load_state *state, size_t head_size, void **head, size_t *vasize);
-> TEE_Result sn_elf_load_body(struct elf_load_state *state, vaddr_t vabase);
-> void sn_elf_load_final(struct elf_load_state *state);

\optee_os\core\arch\arm\kernel\elf_load.c
-> struct shdr *store_shdr
-> TEE_Result sn_elf_load_init(struct elf_load_state **ret_state, struct shdr *shdr) {...}
-> TEE_Result sn_elf_load_head(struct elf_load_state *state, size_t head_size, void **head, size_t *vasize) {...}
-> static TEE_Result sn_e64_load_ehdr(struct elf_load_state *state, Elf32_Ehdr *eh32) {...}
-> static TEE_Result sn_load_head(struct elf_load_state *state, size_t head_size) {...}
-> TEE_Result sn_elf_load_body(struct elf_load_state *state, vaddr_t vabase) {...}
-> void sn_elf_load_final(struct elf_load_state *state) {...}

\optee_os\core\include\mm\tee_mmu.h
-> TEE_Result sn_tee_mmu_init(struct run_info *run);
-> void sn_tee_mmu_map_clear(struct run_info* run);
-> void sn_tee_mmu_map_stack(struct run_info *run);
-> TEE_Result sn_tee_mmu_map_add_segment(struct proc *proc, struct mobj *mobj, size_t offs, size_t size, uint32_t prot);
-> void sn_tee_mmu_set_ctx(struct proc *proc);
-> uintptr_t sn_tee_mmu_get_load_addr(const struct run_info *const run);

\optee_os\core\arch\arm\mm\tee_mmu.c
-> TEE_Result sn_tee_mmu_init(struct run_info *run) {...}
-> void sn_tee_mmu_map_clear(struct run_info *run) {...}
-> void sn_tee_mmu_map_stack(struct run_info *run) {...}
-> TEE_Result sn_tee_mmu_map_add_segment(struct proc *proc, struct mobj *mobj, size_t offs, size_t size, uint32_t prot) {...}
-> void sn_tee_mmu_set_ctx(struct proc *proc) {...}
-> uintptr_t sn_tee_mmu_get_load_addr(const struct run_info *const run) {...}

\optee_os\core\arch\arm\include\mm\core_mmu.h
-> void sn_core_mmu_create_user_map(struct proc *proc);
-> void sn_core_mmu_get_user_pgdir(struct core_mmu_table_info *pgd_info, struct proc *proc);

\optee_os\core\arch\arm\mm\core_mmu_lpae.c
-> void sn_core_mmu_create_user_map(struct proc *proc) {...}
-> void sn_core_mmu_get_user_pgdir(struct core_mmu_table_info *pgd_info, struct proc *proc) {...}
-> static uint64_t xlat_tables_ul1[NUM_PROCS][XLAT_TABLE_ENTRIES] rex
-> //static uint64_t xlat_tables_ul1[CFG_NUM_THREADS][XLAT_TABLE_ENTRIES] rex

\optee_os\core\arch\arm\mm\core_mmu_private.h
-> void sn_core_mmu_populate_user_map(struct core_mmu_table_info *dir_info, struct proc *proc);

\optee_os\core\arch\arm\mm\core_mmu.c
-> void sn_core_mmu_populate_user_map(struct core_mmu_table_info *dir_info, struct proc *proc) {...}

\optee_os\core\arch\arm\include\mm\pgt_cache.h
-> bool sn_pgt_alloc(struct pgt_cache *pgt_cache, vaddr_t begin, vaddr_t last);

\optee_os\core\arch\arm\mm\pgt_cache.c
-> bool sn_pgt_alloc(struct pgt_cache *pgt_cache, vaddr_t begin, vaddr_t last) {...}
-> static void sn_pgt_free_unlocked(struct pgt_cache *pgt_cache) {...}
-> static bool sn_pgt_alloc_unlocked(struct pgt_cache *pgt_cache, vaddr_t begin, vaddr_t last) {...}

\optee_os\core\include\mm\tee_mmu_types.h
-> struct run_info { ... };
-> #define TEE_NUM_PARAMS  4

######phase 2###### 2018-2-13
\optee_os\ta\arch\arm\user_ta_header.c
-> void __tee_utee_entry(void) __noreturn;
-> .entry.ptr64 = (uint64_t)__tee_utee_entry, (const struct ta_head ta_head __section(".ta_head") = {...})

\optee_os\lib\libutee\tee_api_private.h
-> void __tee_utee_entry(void);

\optee_os\lib\libutee\arch\arm\user_ta_entry.c
-> void __noreturn __tee_utee_entry(void) {...}

\optee_os\core\arch\arm\mm\pgt_cache.c
-> static struct pgt *sn_pop_from_free_list(void) {...}
-> static void sn_push_to_free_list(struct pgt *p) {...}

\optee_os\core\include\mm\tee_mm.h
-> void* get_page(unsigned int num); 
-> void free_page(void* addr); 

\optee_os\core\arch\arm\mm\tee_mm.c
-> #include <mm/core_mmu.h>
-> void* get_page(unsigned int num) {...}
-> void free_page(void* addr) {...}

++++++++++++++++++++++++++++++++++++++++++++++++
optee svc 2018-2-9
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-10
\optee_os\core\arch\arm\kernel\thread_a64.S
-> store_xregs sp, CPU_LOCAL_X0, 0, 3 (el0_sync_a64)
-> LOCAL_FUNC el0_svc {...} END_FUNC el0_svc
-> .macro get_proc cpu_local, res, tmp0, tmp1 {...} .endm

\optee_os\core\arch\arm\kernel\proc.c
-> struct proc *get_proc(void) {...}

\optee_os\core\arch\arm\include\kernel\proc.h
-> struct proc *get_proc(void);

\optee_os\core\arch\arm\kernel\asm-defines.c
-> DEFINE(CPU_LOCAL_X0, offsetof(struct cpu_local, x[0]));
-> DEFINE(CPU_LOCAL_X2, offsetof(struct cpu_local, x[2]));
-> DEFINE(CPU_LOCAL_CUR_PROC, offsetof(struct cpu_local, cur_proc));
-> DEFINE(CPU_LOCAL_TMP_STACK, offsetof(struct cpu_local, tmp_stack));
-> DEFINE(PROC_UREGS, offsetof(struct proc, uregs));
-> DEFINE(PROC_SIZE, sizeof(struct proc));
-> DEFINE(UREGS_SPSR, offsetof(struct pcb_regs, spsr));
-> DEFINE(UREGS_PC, offsetof(struct pcb_regs, pc));
-> DEFINE(UREGS_X3, offsetof(struct pcb_regs, x[3]));
-> DEFINE(UREGS_X4, offsetof(struct pcb_regs, x[4]));
-> DEFINE(UREGS_X30, offsetof(struct pcb_regs, x[30]));

\optee_os\core\arch\arm\include\tee\arch_svc.h
-> struct proc;
-> void sn_tee_svc_handler(struct proc *proc);

\optee_os\core\arch\arm\tee\arch_svc.c
-> #include <kernel/proc.h>
-> void sn_tee_svc_handler(struct proc *proc) {...}

\Clos\optee_os\core\arch\arm\tee\arch_svc_a64.S
-> FUNC sn_tee_svc_do_call {...} END_FUNC sn_tee_svc_do_call

\optee_os\core\arch\arm\tee\arch_svc_private.h
-> uint32_t sn_tee_svc_do_call(struct proc *proc, syscall_t func);

++++++++++++++++++++++++++++++++++++++++++++++++
optee printf 2018-2-10
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-11
\optee_os\core\arch\arm\kernel\user_ta.c
-> vfp_enable(); (tee_ta_load {...})

\optee_os\core\tee\tee_svc.c
-> int sn_syscall_log(struct proc *proc) {...}

\optee_os\core\include\tee\tee_svc.h
-> struct proc;
-> int sn_syscall_log(struct proc *proc);

\optee_os\core\arch\arm\tee\arch_svc.c
-> //SYSCALL_ENTRY(syscall_log),
-> SYSCALL_ENTRY(sn_syscall_log),

++++++++++++++++++++++++++++++++++++++++++++++++
optee proc schedule 2018-2-10
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-11
\optee_os\core\kernel\tee_ta_manager.c
-> res = enqueue(proc); (tee_ta_exec {...})
-> //extern struct list_head run_queues[];

\optee_os\core\arch\arm\kernel\proc.c
-> int enqueue(struct proc* p) {...}

\optee_os\core\arch\arm\include\kernel\proc.h
-> int enqueue(struct proc *p);

######phase 2###### 2018-2-16
\optee_os\core\arch\arm\kernel\proc.c
-> #define P_RETURN (1 << 2)
-> int enqueue_head(struct proc* p) {...}

\optee_os\core\arch\arm\include\kernel\proc.h
-> int enqueue_head(struct proc *p);

\optee_os\core\arch\arm\tee\arch_svc_a64.S
-> /* sn_syscall_sys_return */

\optee_os\core\tee\tee_svc.c
-> void sn_syscall_sys_return(struct proc *proc) {...}

\optee_os\core\arch\arm\tee\arch_svc.c
-> void sn_tee_svc_handler(struct proc *proc) {...}

\optee_os\core\arch\arm\include\kernel\proc.h
-> void __noreturn test_cpu_idle(void);

\optee_os\core\arch\arm\kernel\proc.c
-> void proc_schedule(void) {...}
-> void __noreturn test_cpu_idle(void) {...}

++++++++++++++++++++++++++++++++++++++++++++++++
optee fork 2018-2-12
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-16
\optee_os\core\include\tee\tee_svc.h
-> int syscall_fork(struct proc *proc);

\optee_os\core\tee\tee_svc.c
-> int syscall_fork(struct proc *proc) {...}

\optee_os\core\arch\arm\tee\arch_svc.c
-> SYSCALL_ENTRY(syscall_fork),

\optee_os\core\arch\arm\include\kernel\ipc.h
-> #define M_TYPE_FORK 2

\optee_os\lib\libutee\arch\arm\utee_syscalls_asm.S
-> UTEE_SYSCALL pm_fork, TEE_SCN_FORK, 1

\optee_os\lib\libutee\include\utee_syscalls.h
-> int fork(void);
-> int pm_fork(int mp_id);

\optee_os\lib\libutee\include\tee_syscall_numbers.h
-> #define TEE_SCN_FORK 76
-> #define TEE_SCN_MAX 76

\optee_os\lib\libutee\arch\arm\user_ta_entry.c
-> static TEE_Result user_main(void) {...}
-> struct mproc {...};
-> struct mproc mprocs[16];
-> static void pm_main(void) {...}
-> pm_main(); (__tee_utee_entry {...})

\optee_os\lib\libutee\tee_api.c
-> #include <tee_ipc.h>
-> int fork(void) {...}

\optee_os\core\arch\arm\include\kernel\proc.h
-> int proc_fork(struct proc *proc);

\optee_os\core\arch\arm\kernel\proc.c
-> int proc_fork(struct proc *proc) {...}

\optee_os\core\arch\arm\include\kernel\user_ta.h
-> TEE_Result ta_copy(struct proc *proc, struct proc *p_ch);

\optee_os\core\arch\arm\kernel\user_ta.c
-> static void mobj_copy(struct mobj *mdst, struct mobj *msrc) {...}
-> TEE_Result ta_copy(struct proc *proc, struct proc *p_ch) {...}

\optee_os\lib\libutee\include\
+ tee_ipc.h

\optee_os\core\include\rtos_time.h
-> uint64_t get_monotonic(void);

\optee_os\core\kernel\rtos_time.c
-> uint64_t get_monotonic(void) {...}

\optee_os\core\tee\tee_svc.c
-> #include <rtos_time.h>
-> m.u.ts = get_monotonic(); (syscall_receive {...})
-> m.u.ts = get_monotonic(); (int sn_notify {...})

++++++++++++++++++++++++++++++++++++++++++++++++
optee memcpy asm 2018-2-13
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\lib\libutils\isoc\arch\arm\
+ phys_copy.S

\optee_os\lib\libutils\isoc\arch\arm\sub.mk
-> srcs-$(CFG_ARM64_$(sm)) += phys_copy.S

++++++++++++++++++++++++++++++++++++++++++++++++
optee memset asm 2018-2-13
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\lib\libutils\isoc\arch\arm\
+ phys_set.S

\optee_os\lib\libutils\isoc\arch\arm\sub.mk
-> srcs-$(CFG_ARM64_$(sm)) += phys_set.S

++++++++++++++++++++++++++++++++++++++++++++++++
optee proc Interrupt 2018-2-16
++++++++++++++++++++++++++++++++++++++++++++++++
######phase 1###### 2018-2-16
\optee_os\core\arch\arm\plat-vexpress\main.c
-> static void main_fiq(void) {...}

\optee_os\core\kernel\rtos_timer.c
-> void update_process_times(void) {...}

\optee_os\core\arch\arm\kernel\thread_a64.S
-> //process_native_intr_handler fiq (LOCAL_FUNC elx_fiq {...} END_FUNC elx_fiq)
-> proc_native_intr_handler fiq
-> .macro proc_native_intr_handler mode:req {...} .endm
-> .macro intr_save_proc_context {...} .endm

\optee_os\core\arch\arm\kernel\asm-defines.c
-> DEFINE(PCB_REGS_X4, offsetof(struct proc, regs.x[4]));
-> DEFINE(PCB_REGS_SPSR, offsetof(struct proc, regs.spsr));

++++++++++++++++++++++++++++++++++++++++++++++++
optee work left
++++++++++++++++++++++++++++++++++++++++++++++++
\optee_os\core\arch\arm\mm\pgt_cache.c
-> sn_pgt_alloc()
{
	? mutex_lock
	? condvar_broadcast
	? condvar_wait
}

lock:
1、 proc->p_rts_flags |= P_SENDING;
2、 if(p->p_rts_flags !=0)
		DMSG("interrupted proc not running!\n");
	else
		enqueue_head(p);